--- easymock-3.1/org/easymock/EasyMock.java	2011-11-05 10:57:38.000000000 +0000
+++ easymock-3.1.old/org/easymock/EasyMock.java	2012-06-25 01:56:43.000000000 +0000
@@ -1852,14 +1852,6 @@
     }
 
     /**
-     * Expects a byte that is equal to the given value.
-     * 
-     * @param value
-     *            the given value.
-     * @return <code>0</code>.
-     */
-
-    /**
      * Expect any object but captures it for later use.
      * 
      * @param <T>
@@ -1958,111 +1950,6 @@
     }
 
     /**
-     * Expect any boolean but captures it for later use.
-     * 
-     * @param captured
-     *            Where the parameter is captured
-     * @return <code>0</code>
-     * 
-     * @deprecated Because of harder erasure enforcement, doesn't compile in
-     *             Java 7
-     */
-    @Deprecated
-    public static boolean capture(final Capture<Boolean> captured) {
-        return captureBoolean(captured);
-    }
-
-    /**
-     * Expect any int but captures it for later use.
-     * 
-     * @param captured
-     *            Where the parameter is captured
-     * @return <code>0</code>
-     * 
-     * @deprecated Because of harder erasure enforcement, doesn't compile in
-     *             Java 7
-     */
-    @Deprecated
-    public static int capture(final Capture<Integer> captured) {
-        return captureInt(captured);
-    }
-
-    /**
-     * Expect any long but captures it for later use.
-     * 
-     * @param captured
-     *            Where the parameter is captured
-     * @return <code>0</code>
-     * 
-     * @deprecated Because of harder erasure enforcement, doesn't compile in
-     *             Java 7
-     */
-    @Deprecated
-    public static long capture(final Capture<Long> captured) {
-        return captureLong(captured);
-    }
-
-    /**
-     * Expect any float but captures it for later use.
-     * 
-     * @param captured
-     *            Where the parameter is captured
-     * @return <code>0</code>
-     * 
-     * @deprecated Because of harder erasure enforcement, doesn't compile in
-     *             Java 7
-     */
-    @Deprecated
-    public static float capture(final Capture<Float> captured) {
-        return captureFloat(captured);
-    }
-
-    /**
-     * Expect any double but captures it for later use.
-     * 
-     * @param captured
-     *            Where the parameter is captured
-     * @return <code>0</code>
-     * 
-     * @deprecated Because of harder erasure enforcement, doesn't compile in
-     *             Java 7
-     */
-    @Deprecated
-    public static double capture(final Capture<Double> captured) {
-        return captureDouble(captured);
-    }
-
-    /**
-     * Expect any byte but captures it for later use.
-     * 
-     * @param captured
-     *            Where the parameter is captured
-     * @return <code>0</code>
-     * 
-     * @deprecated Because of harder erasure enforcement, doesn't compile in
-     *             Java 7
-     */
-    @Deprecated
-    public static byte capture(final Capture<Byte> captured) {
-        return captureByte(captured);
-    }
-
-    /**
-     * Expect any char but captures it for later use.
-     * 
-     * @param captured
-     *            Where the parameter is captured
-     * @return <code>0</code>
-     * 
-     * @deprecated Because of harder erasure enforcement, doesn't compile in
-     *             Java 7
-     */
-    @Deprecated
-    public static char capture(final Capture<Character> captured) {
-        return captureChar(captured);
-    }
-
-    /**
      * Switches the given mock objects (more exactly: the controls of the mock
      * objects) to replay mode. For details, see the EasyMock documentation.
      * 
--- easymock-3.1/org/easymock/internal/ClassProxyFactory.java	2011-11-03 00:55:52.000000000 +0000
+++ easymock-3.1.old/org/easymock/internal/ClassProxyFactory.java	2012-06-25 02:02:09.000000000 +0000
@@ -161,7 +161,7 @@
         final MethodInterceptor interceptor = new MockMethodInterceptor(handler);
         enhancer.setCallbackType(interceptor.getClass());
 
-        Class mockClass;
+        Class<?> mockClass;
         try {
             mockClass = enhancer.createClass();
         } catch (final CodeGenerationException e) {
@@ -182,7 +182,7 @@
             if (ClassExtensionHelper.getCurrentConstructorArgs() != null) {
                 // Really instantiate the class
                 final ConstructorArgs args = ClassExtensionHelper.getCurrentConstructorArgs();
-                Constructor cstr;
+                Constructor<?> cstr;
                 try {
                     // Get the constructor with the same params
                     cstr = mockClass.getDeclaredConstructor(args.getConstructor().getParameterTypes());
@@ -207,8 +207,8 @@
                     // ///CLOVER:ON
                 } catch (final InvocationTargetException e) {
                     throw new RuntimeException(
-                            "Failed to instantiate mock calling constructor: Exception in constructor", e
-                                    .getTargetException());
+			    "Failed to instantiate mock calling constructor: Exception in constructor",
+                            e.getTargetException());
                 }
                 return mock;
             } else {
@@ -251,7 +251,7 @@
              * Filter all private constructors but do not check that there are
              * some left
              */
-            @SuppressWarnings("unchecked")
+            @SuppressWarnings("rawtypes")
             @Override
             protected void filterConstructors(final Class sc, final List constructors) {
                 CollectionUtils.filter(constructors, new VisibilityPredicate(sc, true));
--- easymock-3.1/org/easymock/internal/matchers/CompareTo.java	2011-09-27 01:02:40.000000000 +0000
+++ easymock-3.1.old/org/easymock/internal/matchers/CompareTo.java	2012-06-25 02:03:06.000000000 +0000
@@ -35,7 +35,7 @@
         this.expected = value;
     }
 
-    @SuppressWarnings("unchecked")
+    @SuppressWarnings({ "unchecked", "rawtypes" })
     public boolean matches(final Object actual) {
 
         if (!(actual instanceof Comparable)) {
